Измениния:


1) class AbstractUnit:

    protected boolean defenceBonus = false;

    public void getTurn() {
        if (defenceBonus) {
            defence -= 5;
            game.addMessage("-5 defence", getPosition().x + 45, getPosition().y + 75);
            defenceBonus = false;
        }
    }

    public void heal() {
            int plus = (int)(maxHp * .15);
            hp = ((hp + plus) > maxHp) ? maxHp : hp + plus;
            game.addMessage("+" + plus + " hp", getPosition().x + 45, getPosition().y + 75);
    }

    public void defend() {
        defenceBonus = true;
        defence += 5;
        game.addMessage("+5 defence", getPosition().x + 45, getPosition().y + 75);
    }

------------------------------------------------------------------------------------------------------------------------

2) class Hero - убрала getTurn(), тк добавила общую реализацию в AbstractUnit

------------------------------------------------------------------------------------------------------------------------

3) class Monster:

    @Override
    public void getTurn() {
        super.getTurn();
        sleepTimer = 1.0f;
    }

    public boolean ai(float dt) {
            if (sleepTimer > 0.0f) {
                sleepTimer -= dt;
                return false;
            }

            //randomly decide what action to take
            int decision = (int) (Math.random() * 3);
            switch (decision) {
                case 0:
                    meleeAttack(target);
                    break;
                case 1:
                    defend();
                    break;
                case 2:
                    heal();
                    break;
            }
        return true;
   }

------------------------------------------------------------------------------------------------------------------------

4)class RpgGame:

    @Override
    public void create() {
        ...

        btnGUI.add(new Button("Defend", new Texture("btn.png"), new Rectangle(200, 120, 80, 80)));
        btnGUI.add(new Button("Heal", new Texture("btn.png"), new Rectangle(200, 220, 80, 80)));
    }

    public void update(float dt) {
        ...

        if (isHeroTurn()) {
            for (int i = 0; i < btnGUI.size(); i++) {
                if (btnGUI.get(i).checkClick()) {
                    String action = btnGUI.get(i).getAction();
                    if (action.equals("Attack")) {
                        if (units.get(selectedUnit) instanceof Monster) {
                            player.meleeAttack(units.get(selectedUnit));
                            nextTurn();
                        }
                    }
                    if (action.equals("Defend")) {
                        player.defend();
                        nextTurn();
                    }
                    if (action.equals("Heal")) {
                        player.heal();
                        nextTurn();
                    }
                }
            }
        } else {
            if (((Monster) units.get(currentUnit)).ai(dt)) {
                nextTurn();
            }
        }
        ...
    }
------------------------------------------------------------------------------------------------------------------------